#!/usr/bin/env ruby
# encoding: utf-8

SUCCESS = 0
CONFIGURATION_ERROR = 1

def display_help
    $stdout.puts "\t\tAllGems - Document Everything
usage: allgems [opts]
--config -c:\t\t\t\t\tOutput apache configuration
--notall -n:\t\t\t\t\tDon't fetch all versions
--daemonize -D:\t\t\t\t\tRun as a daemon
--datadir -d /path:\t\t\t\tData directory for documents/gems (defaults to /tmp/allgems)
--dbinfo -b (/path/file.db|user:pass@host)\tDatabase info. Path for sqlite or user/pass pair for pgsql (defaults sqlite path \#{datadir}/allgems.db)
--dbtype -t (mysql|postgres|sqlite)\t\tType of database connection
--formatter -f rdoc[,hanna,sdoc]:\t\tRDoc formatter (defaults to rdoc (which is darkfish))
--interval -i \\d+:\t\t\t\tSeconds to wait before updating documents (defaults to 1 hour)
--runners -r \\d+:\t\t\t\tNumber of threads to use (defaults to 10)
--log -L [/path/file]:\t\t\t\tTurn logging on (no argument defaults to STDOUT)
--verbosity -V [(debug|info|warn|fatal)]:\tLogging level (no argument defaults to info)
--server -s:\t\t\t\t\tTurns on server interaction
--host -H host.name:\t\t\t\tSet the domain name for the associated site
--port -p \\d+:\t\t\t\t\tSet port for the associated site
--sync -S\t\t\t\t\tSync local gems to AllGems site (generally used with -H and -p)
--save -w [/path]:\t\t\t\tSave configuration to given path (Default ~/.allgems.config)
--load -l [/path]:\t\t\t\tLoad configuration from path (Default ~/.allgems.config)
--sources -z source1[,source2,source3]:\t\tSet sources to fetch gems from (defaults Gem.sources)
--help -h:\t\t\t\t\tDisplay this help text"
end

# load in our libraries
['logger', 'fileutils', 'getoptlong', 'allgems', 'sequel'].each{|f|require f}

# figure out what system we are on
require 'rbconfig'
ON_WINDOWS = Config::CONFIG['host_os'] =~ /mswin|mingw/

# set default values
config = {
    :config_output => false,
    :daemonize => false,
    :datadir => '/tmp/allgems',
    :formatter => nil,
    :interval => 3600,
    :runners => 10,
    :dbfile => nil,
    :dbuser => nil,
    :dbpass => nil,
    :dbtype => :sqlite,
    :dbhost => 'localhost',
    :logto => nil,
    :level => Logger::INFO,
    :all => true,
    :server => false,
    :host => nil,
    :port => nil,
    :sync => false,
    :sources => []
}

# figure out what we are doing
opts = GetoptLong.new(
    ['--daemonize', '-D', GetoptLong::NO_ARGUMENT],
    ['--datadir', '-d', GetoptLong::REQUIRED_ARGUMENT],
    ['--dbinfo', '-b', GetoptLong::REQUIRED_ARGUMENT],
    ['--formatter', '-f', GetoptLong::REQUIRED_ARGUMENT],
    ['--interval', '-i', GetoptLong::REQUIRED_ARGUMENT],
    ['--runners', '-r', GetoptLong::REQUIRED_ARGUMENT],
    ['--version', '-v', GetoptLong::NO_ARGUMENT],
    ['--log', '-L', GetoptLong::OPTIONAL_ARGUMENT],
    ['--verbosity', '-V', GetoptLong::OPTIONAL_ARGUMENT],
    ['--help', '-h', GetoptLong::NO_ARGUMENT],
    ['--config', '-c', GetoptLong::NO_ARGUMENT],
    ['--notall', '-n', GetoptLong::NO_ARGUMENT],
    ['--server', '-s', GetoptLong::NO_ARGUMENT],
    ['--host', '-H', GetoptLong::REQUIRED_ARGUMENT],
    ['--port', '-p', GetoptLong::REQUIRED_ARGUMENT],
    ['--sync', '-S', GetoptLong::NO_ARGUMENT],
    ['--save', '-w', GetoptLong::OPTIONAL_ARGUMENT],
    ['--load', '-l', GetoptLong::OPTIONAL_ARGUMENT],
    ['--sources', '-z', GetoptLong::REQUIRED_ARGUMENT],
    ['--dbtype', '-t', GetoptLong::REQUIRED_ARGUMENT]
)
do_load = nil
do_save = nil
opts.each do |opt, arg|
    case opt
    when '--save'
        do_save = arg ? arg : File.expand_path('~/.allgems.config')
    when '--load'
        do_load = arg ? arg : File.expand_path('~/.allgems.config')
    when '--sources'
        config[:sources] = arg.split(',')
    when '--server'
        require 'allgems/CommandReceiver'
        config[:server] = true
    when '--host'
        config[:host] = arg
    when '--daemonize'
        config[:daemonize] = true
    when '--datadir'
        config[:datadir] = arg
    when '--formatter'
        config[:formatter] = arg
    when '--interval'
        config[:interval] = arg.to_i
    when '--runners'
        config[:runners] = arg.to_i
    when '--dbtype'
        exit CONFIGURATION_ERROR unless [:postgres, :mysql, :sqlite].include?(arg.to_sym)
        config[:dbtype] = arg.to_sym
    when '--dbinfo'
        index = arg.index(':')
        if(index)
            at = arg.index('@')
            config[:dbuser] = arg.slice(0,index)
            if(at)
                config[:dbpass] = arg.slice(index+1,at - index -1)
                config[:dbhost] = arg.slice(at+1, arg.length)
            else
                config[:dbpass] = arg.slice(index+1,arg.length)
            end
        else
            config[:dbfile] = arg
        end
    when '--version'
        puts "VERSION INFO"
    when '--log'
        config[:logto] = arg.empty? ? $stdout: arg
    when '--verbosity'
        case arg
        when 'debug'
            config[:level] = Logger::DEBUG
        when 'info'
            config[:level] = Logger::INFO
        when 'warn'
            config[:level] = Logger::WARN
        when 'error'
            config[:level] = Logger::ERROR
        when 'fatal'
            config[:level] = Logger::FATAL
        else
            config[:level] = Logger::INFO
        end
    when '--notall'
        config[:all] = false
    when '--config'
        config[:config_output] = true
    when '--help'
        display_help
        exit SUCCESS
    end
end

config[:dbfile] = "#{config[:datadir]}/allgems.db" if config[:dbfile].nil? && config[:dbuser].nil?
config[:dbtype] = :postgres if config[:dbuser] && config[:dbtype] = :sqlite
config[:interval] = nil unless config[:daemonize]

# yell at user for bad values
if(config[:interval] && config[:interval] <= 0)
    $stderr.puts "ERROR: interval value must be greater than 1"
    exit CONFIGURATION_ERROR
end
if(config[:runners] <= 0)
    $stderr.puts "ERROR: runners value must be greater than 1"
    exit CONFIGURATION_ERROR
end
unless(File.writable?(config[:datadir]))
    created = false
    #check if we can/should create it
    unless(File.exists?(config[:datadir]))
        begin
            FileUtils.mkdir_p config[:datadir]
            created = true
        rescue SystemCallError
            created = false
        end
    end
    config[:datadir] = File.expand_path(config[:datadir])
    unless(created)
        $stderr.puts "ERROR: data directory is not writable. (#{config[:datadir]})"
        exit CONFIGURATION_ERROR
    end
end
if(config[:dbfile] && !File.exists?(config[:dbfile]))
    begin
        FileUtils.touch config[:dbfile]
    rescue SystemCallError
    end
end
if(config[:dbfile] && !File.writable?(config[:dbfile]))
    $stderr.puts "ERROR: database file is not writable. (#{config[:dbfile]})"
    exit CONFIGURATION_ERROR
end

if(do_load)
    require 'json'
    config = JSON.parse(File.read(do_load))
end

if(do_save)
    require 'json'
    file = File.open(do_save, 'w')
    file.write(config.to_json)
    file.close
    exit SUCCESS
end

# set everything
AllGems.defaulterize
AllGems.data_directory = config[:datadir]
AllGems.doc_format = config[:formatter] unless config[:formatter].nil?
AllGems.logger = Logger.new(config[:logto], config[:level])
AllGems.allgems = config[:all]
AllGems.domain_name = config[:host] if config[:host]
AllGems.listen_port = config[:port] if config[:port]
AllGems.sources = config[:sources]
AllGems.runners = config[:runners]
case config[:dbtype]
when :sqlite
    AllGems.dbstring = "sqlite://#{config[:dbfile]}"
when :mysql
    AllGems.dbstring = "mysql://#{config[:dbuser]}:#{config[:dbpass]}@#{config[:dbhost]}"
when :postgres
    AllGems.dbstring = "postgres://#{config[:dbuser]}:#{config[:dbpass]}@#{config[:dbhost]}"
else
    puts "Unsupported database version"
    exit CONFIGURATION_ERROR
end

# are we just giving out configuration?
if(config[:config_output])
puts <<-EOC
Apache virtual host configuration:

<VirtualHost *:80>
        # Uncomment the next line if wanted
        # ServerName #{AllGems.domain_name}

        SetEnv DATA_DIR #{AllGems.data_directory}
        # yeah, not the best thing to do here, I know.
        SetEnv DB_STRING #{AllGems.dbstring}
        
        Alias /docs #{AllGems.data_directory}
        Alias /docs/ #{AllGems.data_directory}/
        Alias #{AllGems.data_directory}/ #{AllGems.data_directory}/
        <Location "/docs">
                PassengerEnabled off
                RewriteEngine on
                RewriteRule allgems.db / [R]
                RewriteRule ^.+?rdoc.*?/tmp/allgems/(.*)$ /docs/$1 [R]
        </Location>
        <Location "#{AllGems.data_directory}">
                PassengerEnabled off
                RewriteEngine on
                RewriteRule .*?rdocs/.*?/tmp/allgems/(.+)$ /docs/$1 [R]
                RewriteRule (.*) /docs/$1 [R]
        </Location>
        <Directory #{AllGems.data_directory}>
                Options -Indexes
        </Directory>
        ErrorDocument 403 /gems
        DocumentRoot #{AllGems.public_directory}
</VirtualHost>

Required apache modules:
mod_rewrite
mod_env
mod_alias
EOC
exit SUCCESS
end

# are we supposed to be a daemon?
if(config[:daemonize])
    if(RUBY_VERSION > '1.9.0')
        Process.daemon
    else
        if(pid = fork)
            Signal.trap('HUP', 'IGNORE')
            Process.detach(pid)
            exit
        end
    end
end

# Make sure we play nice before we get started

Process.setpriority(Process::PRIO_PROCESS, 0, 19) unless ON_WINDOWS

# finally, lets get going

require 'allgems/Runner'
runner = AllGems::Runner.new(:interval => config[:interval])
trap('SIGINT'){runner.stop(true)}
trap('SIGHUP'){runner.stop; runner.do_sync} unless ON_WINDOWS
server = nil
if(config[:server])
    server = AllGems::CommandReceiver.new(runner)
    server.start
end
runner.do_sync
runner.stop
server.stop if server
exit SUCCESS
